{"name":"Glim","tagline":"the small & lightweight mc (Model, Controller) framework on top of werkzeug","body":"Glim is the new framework for API design for python. It has no view layers at least currently. The main idea to build a small structure of a web app that can handle requests. It has SQLAlchemy integration that can map models to DB dynamically. Moreover, it has integration with werkzeug and some powerful features about routing\r\n\r\n# 1 - Installation\r\nCurrently, only cloning this repo is required for the app. However, virtualenv can be used for installing pip dependancies of the project.\r\n\r\n- Clone the repo\r\n```$ git clone git@github.com:aacanakin/glim.git```\r\n- Install virtualenv\r\n```$ sudo easy_install virtualenv```\r\nOR\r\n```$ sudo pip install virtualenv```\r\n- create & activate virtualenv inside `glim` folder\r\n```\r\n$ virtualenv venv\r\n$ . venv/bin/activate\r\n```\r\n- install dependencies\r\n```$ pip install -r reqs```\r\n- start web server\r\n```$ python glim.py start```\r\n\r\nNOTE: PyPI integration will be finished after first release for easy to install\r\n\r\n# 2 - Config\r\n## 2.1 - Environments\r\n## 2.2 - The config structure & it's calls\r\n\r\n# 3 - Routing\r\nGlim has powerful routing feature which developers can define routes which will be mapped to controllers. The route definition file is at `app/routes.py` The simplest route definition would be the following;\r\n```python\r\n# routes.py\r\nurls = {\r\n    '/' : 'BaseController.hello'\r\n    '/restful' : 'BaseController'\r\n}\r\n```\r\n\r\nThis definition simply means that the root route '/' will be mapped into\r\n`BaseController`'s `hello()` function.\r\n\r\nAs you might notice, there exists '/restful' route which maps 'BaseController' request methods. That means a `POST /restful` will be mapped into\r\n`BaseControoler.post()`. The supported requests methods are `get, post, put, patch, delete`.\r\n\r\n## 3.1 - Route filtering\r\nOne of the great feature of routing system is filtering. You can define filters which will be run sequential. This feature is mostly used in input validation. The simplest route filtering would be the following;\r\n```python\r\n# routes.py\r\nurls = {\r\n    '/' : [\r\n        'BaseController.validate',\r\n        'BaseController.hello'\r\n    ]\r\n}\r\n```\r\n\r\nThis definition simply means that the root route '/' is mapped to\r\n`BaseController`'s `validate()` & `hello()` function sequentially.\r\n\r\n**Important Note**: If `validate()` function returns an instance of `Response`, then `hello()` function won't be called\r\n\r\n## 3.2 - Route grouping\r\nThis is also one of the greatest feature of glim. People always want to create grouped routes. The simplest route grouping would be the following;\r\n```python\r\n# routes.py\r\nurls = {\r\n    '/api' : {\r\n        '/auth' : 'ApiController.auth',\r\n        '/me' : [\r\n            'ApiController.check_auth',\r\n            'ApiController.me'\r\n        ]\r\n    } \r\n}\r\n```\r\nHere, we have defined two routes; `/api/auth` & `/api/me`. The `/api/me` function has a filter namely `check_auth` as you noticed.\r\n\r\n**Important Note**: In route grouping, you need to define filters for each endpoint repeatedly for not having ambiguous definition for routes.\r\n\r\n# 4 - Controllers\r\nThe controllers are no different than any other MVC framework's controllers. The controllers file resides in `app/controllers.py`. The simplest controller definition would be the following;\r\n```python\r\n# controllers.py\r\nfrom glim.core import Controller\r\nfrom werkzeug.wrappers import Response\r\n\r\nclass BaseController(Controller):\r\n    def hello():\r\n        return Response('Hello World Mate!')\r\n```\r\nThis controller definition could be mapped to routes as `BaseController.hello`\r\nTo see this text on browser, `Response` object should be returned\r\n\r\n## 4.1 - Restful controllers\r\nTo make controllers restful, it is highly recommended to extend `RestfulController` class. The simplest restful controller would be the following;\r\n```python\r\nfrom glim.core import RestController\r\nfrom werkzeug.wrappers import Response\r\n\r\nclass RestfulController(RestController):\r\n\r\n    def get(self):\r\n        return Response('RESTful GET')\r\n\r\n    def post(self):\r\n        return Response('RESTful POST')\r\n\r\n    def put(self):\r\n        return Response('RESTful PUT')\r\n```\r\n**Important Note**: A restful controller can not be used as a route filter\r\n\r\n# 5 - Models\r\nThis layer is used for SQLAlchemy model integration to glim. In glim, models are mapped to database tables dynamically w/ SQLAlchemy. The models file resides in `app/models.py`. The simplest model definition would be the following;\r\n```python\r\n# models.py\r\nfrom glim.core import Model\r\nfrom sqlalchemy import Column, Integer, String\r\n\r\nclass User(Model):\r\n\r\n    __tablename__ = 'users'\r\n    id = Column(Integer, primary_key = True)\r\n    fullname = Column(String(255))\r\n    title = Column(String(255))\r\n\r\n    def __repr__(self):\r\n        return \"<User (name = %s,title = %s)\" % (self.full_name, self.title)\r\n```\r\nThis is not any different than it is documented on SQLAlchemy's documentation website.\r\n\r\n# 6 - Services\r\nServices is not a must layer but it is very useful for seperating database models with model or db operations. The services file resides in `app/services.py`. Assume that we have a model namely `User` above, the simplest service definition would be the following;\r\n```python\r\n# services.py\r\nfrom glim.core import Service\r\nfrom glim.facades import Database as DB, Orm as ORM\r\nfrom models import User\r\n\r\nclass UserService(Service):\r\n    @staticmethod   \r\n    def register(full_name = 'Aras Can', title = 'glim developer'):\r\n        # DB.execute(\"INSERT INTO users (full_name, title) VALUES ('%s', '%s')\" % (full_name, title))\r\n        \r\n        # generate an instance of User\r\n        user = User(fullname = \"Aras Can Akin\", title = \"glim developer\")\r\n\r\n        # writes a new user to the database session\r\n        ORM.add(user)\r\n\r\n        # commits as SQLAlchemy suggests\r\n        ORM.commit()\r\n```\r\nFrom my perspective, Services should be stateless and therefore `static`. However, it's not a must to use them static. You can instantiate in controllers to use them.\r\n\r\nIn controllers, `UserService.register(full_name, title)` would register a user in the database.\r\n\r\n# 7 - Extension System\r\n## 7.1 - Config\r\n## 7.2 - Integration\r\n## 7.3 - A redis extension example\r\n\r\n# 8 - Internal Framework Components\r\n## 8.1 - Facades\r\n## 8.2 - The registry\r\n## 8.3 - Database & ORM\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}